---
description: "Package management, versioning strategies, and dependency maintenance"
globs: 
alwaysApply: false
---
# Dependencies & Package Management

This guide covers modern dependency management using `uv` for the Automagik Agents framework, following current best practices with `uv add`, dependency groups, and lock files.

## Package Management Philosophy

### Core Principles

1. **Reproducible builds** with `uv.lock` lock files
2. **Security-first** dependency management with automated scanning
3. **Fast installation** with uv package manager (10x faster than pip)
4. **Modern workflow** using `uv add`/`uv remove` commands
5. **Dependency groups** for development vs production separation

### Tools & Standards

- **Primary**: `uv` package manager with native commands
- **Lock file**: `uv.lock` (auto-generated, never edit manually)
- **Configuration**: `pyproject.toml` with PEP 735 dependency groups
- **Workflow**: `uv add`, `uv remove`, `uv sync` instead of pip-style commands
- **Security**: Automated vulnerability scanning and updates

## Environment Setup

### Development Environment

```bash
# 1. Create and activate virtual environment
uv venv
source .venv/bin/activate  # Linux/macOS
# .venv\Scripts\activate   # Windows

# 2. Install project with all dependencies (editable by default)
uv sync

# 3. Run the application
python -m src

# 4. Verify installation
python -c "import src; print('Installation successful')"
```

## Modern Dependency Management

### Adding Dependencies

#### Production Dependencies

```bash
# Add package with latest compatible version
uv add httpx

# Add with specific version constraint
uv add "httpx>=0.25.0,<1.0"

# Add multiple packages at once
uv add fastapi uvicorn pydantic

# Add from Git repository
uv add git+https://github.com/encode/httpx

# Add from local path
uv add ./packages/my-package

# Add with extras
uv add "fastapi[all]"
```

#### Development Dependencies

```bash
# Add to dev group (modern PEP 735 style)
uv add --group dev pytest ruff mypy

# Add to specific custom group
uv add --group lint ruff black isort

# Add to test group
uv add --group test pytest-asyncio pytest-cov

# Note: After adding dependencies, just run 'uv sync' to install everything
```

#### Optional Dependencies (Extras)

```bash
# Add optional dependencies for users
uv add --optional discord "discord.py>=2.0"

# Add to multiple extras
uv add --optional whatsapp --optional telegram python-telegram-bot
```

### Modern pyproject.toml Structure

```toml
[project]
name = "automagik-agents"
version = "0.1.0"
description = "Production-grade AI agent framework"
authors = [{name = "Automagik Team", email = "team@automagik.dev"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"

# Core production dependencies
dependencies = [
    "pydantic>=2.5.0",
    "pydantic-ai>=0.0.36",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "psycopg2-binary>=2.9.0",
    "httpx>=0.25.0",
    "python-dotenv>=1.0.0",
    "typer>=0.9.0",
    "structlog>=23.0.0",
]

# Optional dependencies (extras) for end users
[project.optional-dependencies]
discord = ["discord.py>=2.0.0"]
whatsapp = ["evolution-api-client>=1.0.0"]
notion = ["notion-client>=2.3.0"]
all = ["automagik-agents[discord,whatsapp,notion]"]

# Development dependency groups (PEP 735)
[dependency-groups]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-httpx>=0.22.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.3.0",
    "pytest-mock>=3.11.0",
]

lint = [
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.13.0",
    "mypy>=1.6.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
]

security = [
    "pip-audit>=2.6.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]

[project.scripts]
automagik-agents = "src.cli:main"
agent = "src.cli:agent_command"
```

### Updating Dependencies

#### Regular Updates

```bash
# Update all dependencies to latest compatible versions
uv lock --upgrade

# Update specific package
uv add "httpx>=0.27.0" --upgrade

# Update all packages in a group
uv sync --group dev --upgrade

# Check for outdated packages
uv tree --outdated --depth=1
```

#### Security Updates

```bash
# Check for vulnerabilities
pip-audit --format=json

# Update vulnerable package immediately
uv add "package-name>=safe-version"

# Regenerate lock with security updates
uv lock --upgrade-package vulnerable-package
```

### Removing Dependencies

```bash
# Remove production dependency
uv remove httpx

# Remove from specific group
uv remove --group dev pytest-mock

# Remove from optional dependencies
uv remove --optional discord "discord.py"

# Remove multiple packages
uv remove ruff black mypy
```

## Workflow Commands

### Environment Management

```bash
# Create new project with uv
uv init automagik-agents
cd automagik-agents

# Sync environment (installs project as editable with all dependencies)
uv sync

# Run the application
python -m src

# Run other commands directly
pytest
ruff check
```

### Working with Groups

```bash
# Show dependency tree
uv tree

# Check for outdated packages
uv tree --outdated --depth=1
```

## Version Pinning Strategy

### Production Dependencies
```toml
# ✅ GOOD: Compatible version ranges
"pydantic>=2.5.0,<3.0"
"fastapi>=0.104.0,<1.0"

# ✅ GOOD: Exact pins for critical packages
"psycopg2-binary==2.9.9"

# ❌ AVOID: Unpinned versions in production
"requests"
"numpy>=1.0"
```

### Development Dependencies
```toml
# ✅ GOOD: More flexible for dev tools
"pytest>=7.4.0"
"ruff>=0.1.0"

# ✅ GOOD: Can be more specific
"mypy==1.8.0"
"black==24.1.0"
```

## Security & Vulnerability Management

### Automated Scanning

```bash
# Install security tools in security group
uv add --group security pip-audit bandit safety

# Run security scans
uv run --group security pip-audit
uv run --group security bandit -r src/
uv run --group security safety check
```

### CI/CD Integration

```yaml
# .github/workflows/dependencies.yml
name: Dependency Security
on: [push, pull_request]

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        
      - name: Install dependencies
        run: uv sync --group security
        
      - name: Security audit
        run: uv run pip-audit --format=json
        
      - name: Code security scan
        run: uv run bandit -r src/ -f json
```

### Vulnerability Response

#### Critical Vulnerabilities (CVSS ≥ 7.0)

```bash
# 1. Check for issues
uv run pip-audit --desc

# 2. Update vulnerable package
uv add "package-name>=safe-version"

# 3. Verify fix
uv run pip-audit

# 4. Commit with security note
git commit -m "SECURITY: Update package-name to fix CVE-YYYY-XXXX"
```

## Environment Configuration

### Development Setup
```bash
# .env.development
AM_ENV=development
AM_LOG_LEVEL=DEBUG

# Install all dependencies
uv sync

# Run the application
python -m src
```

## Advanced Patterns

### Dependency Sources

```toml
# Custom sources in pyproject.toml
[tool.uv.sources]
# Development version from git
my-package = { git = "https://github.com/me/my-package", branch = "dev" }

# Local development
other-package = { path = "../other-package", editable = true }

# Custom index
pytorch = { index = "pytorch" }

[[tool.uv.index]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cpu"
```

### Platform-Specific Dependencies

```bash
# Add platform-specific dependencies
uv add "jax; sys_platform == 'linux'"
uv add "pywin32; sys_platform == 'win32'"

# Python version specific
uv add "importlib-metadata; python_version < '3.10'"
```

### Workspace Dependencies

```toml
[tool.uv.workspace]
members = ["packages/*"]

[tool.uv.sources]
my-agent = { workspace = true }
```

## Performance Optimization

### Fast Installs

```bash
# Use cache effectively
export UV_CACHE_DIR=~/.cache/uv

# Standard sync (automatically parallel and fast)
uv sync
```



## Troubleshooting

### Common Issues

#### Lock File Issues

```bash
# Regenerate lock file
uv lock --upgrade

# Force clean install
rm uv.lock
uv lock
uv sync
```

#### Dependency Conflicts

```bash
# Check dependency tree
uv tree

# Show conflicts
uv tree --outdated

# Resolve with constraints
uv add "problematic-package<2.0"
```

#### Cache Problems

```bash
# Clear uv cache
uv cache clean

# Reinstall environment
rm -rf .venv
uv sync
```

## Task Management Integration

Always use Task Master when working with dependencies:

```bash
# Plan dependency work
mcp_taskmaster-ai_next_task --projectRoot "/absolute/path"

# Document changes
mcp_taskmaster-ai_update_subtask --id="X.Y" --prompt="Updated package X using uv add, resolved version conflicts" --projectRoot "/absolute/path"

# Mark complete
mcp_taskmaster-ai_set_task_status --id="X.Y" --status="done" --projectRoot "/absolute/path"
```

## Best Practices Summary

### ✅ DO
1. **Use `uv add/remove`** instead of pip-style commands
2. **Use dependency groups** (`[dependency-groups]`) for development
3. **Use optional dependencies** (`[project.optional-dependencies]`) for user features  
4. **Pin versions appropriately** (flexible for dev, specific when needed)
5. **Use `uv sync`** to install all dependencies
6. **Leverage `uv.lock`** for reproducible builds
7. **Use `uv tree --outdated`** to check for updates
8. **Run directly** with `python -m src` after sync
9. **Regular security audits** with pip-audit

### ❌ DON'T
1. **Don't use `uv pip install`** (legacy compatibility mode)
2. **Don't edit `uv.lock`** manually 
3. **Don't mix pip and uv** commands
4. **Don't ignore security updates**
5. **Don't use unpinned versions** when precision is needed
6. **Don't bypass dependency groups** without good reason
7. **Don't use `requirements.txt`** with modern uv projects
8. **Don't ignore version conflicts**
9. **Don't skip testing** after dependency updates

### Migration from pip/Poetry

```bash
# From requirements.txt
uv add -r requirements.txt

# From Poetry pyproject.toml (use pdm import then clean up)
uvx pdm import pyproject.toml
# Then manually convert [tool.pdm.dev-dependencies] to [dependency-groups]

# From existing pip installs
uv add $(pip freeze | cut -d'=' -f1)
```

This modern dependency management approach ensures fast, secure, and reproducible package management for the automagik-agents framework using current uv best practices with a simple development workflow.
