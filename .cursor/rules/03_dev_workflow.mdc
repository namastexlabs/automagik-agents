---
description: Daily development workflow, mode switching, and implementation patterns for automagik-agents
globs: src/**/*,tests/**/*,*.py,*.md
alwaysApply: false
---

# Development Workflow

## 🔄 Daily Development Workflow

**Documentation**: [setup.md](mdc:docs/setup.md) | [running.md](mdc:docs/running.md) | [agents_overview.md](mdc:docs/agents_overview.md)

**Standard Process:**
1. **Start**: `get_tasks` → `next_task` → `get_task --id <id>` (understand requirements)
2. **Plan**: `analyze_project_complexity` → `expand_task --id <id> --research` (break down complex tasks)
3. **Implement**: `set_task_status --id <id> --status in-progress` → code → test
4. **Progress**: `update_subtask --id <id.sub> --prompt "implementation details"` (log progress)
5. **Complete**: `set_task_status --id <id> --status done` → `generate` (update files)

**Drift Handling:**
- Implementation changes: `update_task --id <id> --prompt "context change"`
- Future task updates: `update --from <id> --prompt "new direction"`
- New discoveries: `add_task --prompt "discovered requirement"`

## 🎯 Development Modes

### Code Mode
- **Focus**: Implementation, file editing, testing
- **Memory**: `search_memory --query "code patterns"`
- **Pattern**: Extend AutomagikAgent, use {{memory_templates}}, register tools
- **Trigger**: Implementation tasks, bug fixes, feature coding

### Architect Mode  
- **Focus**: Analysis, design, planning
- **Memory**: `search_memory --query "architecture patterns"`
- **Constraint**: .md files only, high-level planning
- **Trigger**: System design, structure planning, documentation

### Debug Mode
- **Focus**: Problem diagnosis, systematic analysis
- **Memory**: `search_memory --query "debug patterns"`
- **Pattern**: 5-7 hypotheses → 1-2 likely → add logs → validate
- **Trigger**: Bugs, unexpected behavior, performance issues

### Test Mode
- **Focus**: Test execution, coverage, validation  
- **Memory**: `search_memory --query "test patterns"`
- **Pattern**: Use test criteria from Linear issue description
- **Trigger**: Verification, quality assurance, CI/CD

## 🚀 Creation Checklists

### **Agent Development** (8-Step Process)
1. **Directory**: `mkdir -p src/agents/simple/<agent_name>`
2. **Structure**: Create `agent.py`, `prompts/prompt.py`, `__init__.py`
3. **Agent Class**: Extend `AutomagikAgent` with proper initialization
4. **System Prompt**: Define with `{{memory_templates}}`
5. **Tools**: Register default + custom tools if needed
6. **Config**: Add agent configuration and dependencies
7. **Export**: Export from `__init__.py` for auto-discovery
8. **Test**: Write unit and integration tests

### **Tool Development** (8-Step Process)
1. **Directory**: `mkdir -p src/tools/<service_name>`
2. **Schema**: Define `ToolInput`/`ToolOutput` Pydantic models
3. **Provider**: Handle external API communication (if needed)
4. **Business Logic**: Async function with `RunContext`
5. **Interface**: Create `Tool` object with name, description, function
6. **Package Export**: Export from `__init__.py`
7. **Global Registration**: Add to `src/tools/__init__.py`
8. **Testing**: Unit (mocking) + integration (agent context)

### **API Endpoint** (5-Step Process)
1. **Models**: Define Pydantic request/response models
2. **Route Handler**: Create with `@router.post` and `Depends(verify_api_key)`
3. **Business Logic**: Implement endpoint functionality
4. **Router Registration**: Register in `src/api/routes/__init__.py`
5. **Testing**: Test with `TestClient` and API keys

## ⚠️ Critical DO/DON'T Rules

### **Agent Development**
✅ **DO**: 
- Extend `AutomagikAgent` base class
- Use `async def process_message()` pattern
- Register default tools: `self.tool_registry.register_default_tools()`
- Use memory templates: `{{user_name}}`, `{{recent_context}}`

❌ **DON'T**: 
- Modify `AutomagikAgent` base class directly
- Create agents bypassing framework
- Skip tool registration
- Hardcode user context

### **Tool Development**
✅ **DO**: 
- Use `async def tool(ctx: RunContext[Dict], ...)`
- Return `ToolOutput(...).dict()`
- Handle errors gracefully (return error models)
- Validate inputs with Pydantic

❌ **DON'T**: 
- Raise exceptions from tools
- Use blocking operations in async context
- Skip registration workflow
- Hardcode API keys

### **API Development**
✅ **DO**: 
- Use `Depends(verify_api_key)` for `/api/v1/` endpoints
- Define Pydantic request/response models
- Return structured responses with HTTP status codes
- Handle errors with `HTTPException`

❌ **DON'T**: 
- Bypass authentication middleware
- Use raw dictionaries instead of Pydantic models
- Return unstructured responses
- Ignore error handling

## 🔧 Implementation Patterns

**Memory Templates**:
```python
SYSTEM_PROMPT = """You are an agent.
User: {{user_name}} | Preferences: {{user_preferences}}
Context: {{recent_context}} | Available tools: {tools}"""
```

**Agent Extension**:
```python
class MyAgent(AutomagikAgent):
    def __init__(self, config: Dict[str, str]) -> None:
        super().__init__(config)
        self._code_prompt_text = AGENT_PROMPT
        self.dependencies = AutomagikAgentsDependencies(...)
        self.tool_registry.register_default_tools(self.context)
```

**Tool Registration**:
```python
# interface.py
my_tool_object = Tool(name="service_tool", description="...", function=my_tool)
service_tools = [my_tool_object]

# __init__.py  
from .interface import service_tools
__all__ = ["service_tools"]

# src/tools/__init__.py
from .my_service import service_tools
__all__.append("service_tools")
```

## 🧪 Testing Requirements & Organization

### **Test Directory Structure** (MANDATORY)
```
tests/
├── unit/              # Isolated component testing
│   └── test_mcp_core.py
├── integration/       # Multi-component testing
│   └── test_mcp_integration.py
├── api/              # API endpoint testing
│   └── test_mcp_routes.py
├── db/               # Database layer testing
│   └── test_mcp_repository.py
├── tools/            # Tool-specific testing
├── agents/           # Agent-specific testing
├── utils/            # Utility function testing
└── perf/             # Performance testing
```

### **File Placement Rules** ✅ **DO** / ❌ **DON'T**

✅ **DO**:
- Place unit tests in `tests/unit/test_[module_name].py`
- Place integration tests in `tests/integration/test_[feature_name].py`
- Place API tests in `tests/api/test_[route_name].py`
- Use descriptive test file names matching component being tested
- **NEVER create test files at project root**

❌ **DON'T**:
- Create test files in project root directory (causes repo mess)
- Mix different test types in same file
- Use generic names like `test.py` or `temp_test.py`
- Skip test organization when debugging

### **Feature Testing Mandate**:
- **Unit Tests**: Test individual components in isolation
- **Integration Tests**: Test feature with framework components
- **Memory Tests**: Test memory persistence and retrieval

**Testing Pattern**:
```python
@pytest.mark.asyncio
async def test_agent_memory_integration():
    agent = MyAgent({})
    session = "test_session"
    
    await agent.process_message("Remember my preference: detailed", session)
    response = await agent.process_message("What's my preference?", session)
    
    assert "detailed" in response
```

## 📋 Quality Control

**Before Task Completion**:
- [ ] All subtasks marked as done
- [ ] Code follows automagik-agents patterns
- [ ] Tests written and passing (unit + integration + memory)
- [ ] Documentation updated
- [ ] Memory updated with insights (`add_memories`)
- [ ] Rules updated if new patterns emerged

**Feature Placement Decision**:
- **Agent Features**: `src/agents/simple/[agent_name]/`
- **Tool Integration**: `src/tools/[service_name]/`
- **API Features**: `src/api/routes/`
- **Memory Features**: `src/memory/`
- **Cross-Cutting**: Coordinated implementation

## 💾 Memory Integration

**Development Pattern Recording**:
```bash
# Before implementation
mcp_memories_search_memory --query "agent development patterns"

# During development  
mcp_memories_add_memories --text "AutomagikAgent extension: call super().__init__, set _code_prompt_text, register tools"

# After completion
mcp_memories_add_memories --text "Successful [feature] implementation: key learnings and patterns"
```

**Dependencies**: Use `add_dependency`, `validate_dependencies`, `fix_dependencies` to maintain task order

---

**Remember**: Adapt workflow based on mode context and maintain systematic progress through Linear. Follow creation checklists for consistent implementations.
