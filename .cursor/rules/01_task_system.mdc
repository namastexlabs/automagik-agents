---
description: Linear workflow integration, issue management, and project organization for automagik-agents
globs: **/*
alwaysApply: true
---
# Linear Task System - Efficient Edition

**MANDATORY**: Use Linear for ALL development work. Contains **KNOWN VALUES** to avoid unnecessary API calls.

## üéØ **Known Configuration** (Use directly)

### **Core IDs**
```bash
TEAM_ID="2c6b21de-9db7-44ac-9666-9079ff5b9b84"
MCP_PROJECT_ID="dbb25a78-ffce-45ba-af9c-898b35255896"
```

### **Issue States**
```bash
TRIAGE="84b8b554-a562-4858-9802-0b834857c016"
TODO="c1c6cf41-7115-459b-bce9-024ab46ee0ba"
IN_PROGRESS="99291eb9-7768-4d3b-9778-d69d8de3f333"
IN_REVIEW="14df4fc4-5dff-497b-8b01-6cc3835c1e62"
DONE="1551da4c-03c1-4169-9690-8688f95f9e87"
BACKLOG="e970224f-2f4e-4bc3-942f-0bed7ea7bd67"
CANCELED="15aaa37e-a012-43a8-92d2-b6ff3399137e"
```

### **Labels** (EXCLUSIVE GROUPS - Pick one per group)

**TYPE:** `Feature="b7099189-1c48-4bc6-b329-2f75223e3dd1"` | `Bug="8b4eb347-3278-4844-9a9a-bbe724fb5684"` | `Improvement="78180790-d131-4210-ba0b-117620f345d3"`

**COMPONENT:** `Agent="500151c3-202d-4e32-80b8-82f97a3ffd0f"` | `Tool="537dac03-bbd9-4367-93cd-daaa291db627"` | `API="f7f8e07e-24ad-43cc-b8e9-46e1cf785ef8"` | `Memory="a494ab47-6a08-4677-ae42-1dfc522d3af3"` | `Docs="2d706af0-6daa-4032-8baf-f4e622a66fd2"` | `Testing="70383b36-310f-4ce0-9595-5fec6193c1fb"` | `Database="dc04b1b3-0aa4-4f0a-905f-355e8c93e118"` | `Auth="3a9c411f-5898-48c3-8a9e-b5865ffbfd9d"`

**PRIORITY:** `Urgent="d551b383-7342-437a-8171-7cea73ac02fe"` | `Research="f7bf2f0f-1a55-4a3d-bc61-783ebb3b3f6e"`

## üìù **Task Naming Standards**

### **Linear Auto-Generated Prefix**
- **Format**: `NMSTX-[NUMBER]` (auto-generated by Linear)
- **Example**: `NMSTX-63`, `NMSTX-127`
- **Usage**: ALWAYS reference this ID in commits, branches, and documentation

### **Task Title Format**
```bash
# Epic/Parent Tasks
"üìã [Epic Name]"  # Example: "üìã MCP Integration"

# Feature Tasks
"üî∏ [Component]: [Action]"  # Example: "üî∏ Agent: Add Discord Integration"

# Bug Fixes
"üêõ [Component]: [Issue]"  # Example: "üêõ Memory: Fix user_id validation"

# Improvements
"‚ú® [Component]: [Enhancement]"  # Example: "‚ú® API: Optimize response time"

# Blocked Tasks
"üö´ AI BLOCKED: [Problem]"  # Example: "üö´ AI BLOCKED: Missing API credentials"
```

## üöÄ **Efficient Workflow**

### **Standard Issue Creation**
```bash
# First search memory for existing patterns
mcp_agent-memory_search_memory_nodes --query "Linear issue patterns" --entity "Procedure"

# Then create issue
mcp_linear_create_issue \
  --title "üî∏ Agent: Implement new feature" \
  --teamId "2c6b21de-9db7-44ac-9666-9079ff5b9b84" \
  --projectId "dbb25a78-ffce-45ba-af9c-898b35255896" \
  --priority 2 \
  --labelIds '["b7099189-1c48-4bc6-b329-2f75223e3dd1", "500151c3-202d-4e32-80b8-82f97a3ffd0f"]'

# Create Git branch from issue ID (use returned NMSTX-XX)
git checkout -b NMSTX-XX-brief-description
```

### **AI Blocking Pattern**
```bash
mcp_linear_create_issue \
  --title "üö´ AI BLOCKED: [Problem]" \
  --description "## ü§ñ AI BLOCKING ISSUE
**Blocked Task**: [NMSTX-XX]
**What AI Tried**: [attempts and errors]
**Questions**: [specific questions for human]
**Expected**: [what human should provide]" \
  --teamId "2c6b21de-9db7-44ac-9666-9079ff5b9b84" \
  --projectId "dbb25a78-ffce-45ba-af9c-898b35255896" \
  --priority 1 \
  --labelIds '["d551b383-7342-437a-8171-7cea73ac02fe", "f7bf2f0f-1a55-4a3d-bc61-783ebb3b3f6e"]'
```

## üîÑ **State Updates & Task Closure**

### **Task Lifecycle Management**
```bash
# Start work
mcp_linear_update_issue --id "[NMSTX-XX]" --stateId "99291eb9-7768-4d3b-9778-d69d8de3f333"
git checkout -b NMSTX-XX-feature  # Branch from issue

# Progress with commits
git add -p && git commit -m "feat(NMSTX-XX): implement subtask"
git push origin NMSTX-XX-feature

# Complete task
mcp_linear_update_issue --id "[NMSTX-XX]" --stateId "1551da4c-03c1-4169-9690-8688f95f9e87"
git commit -m "feat(NMSTX-XX): complete implementation"

# Cancel if needed
mcp_linear_update_issue --id "[NMSTX-XX]" --stateId "15aaa37e-a012-43a8-92d2-b6ff3399137e"
mcp_linear_create_comment --issueId "[NMSTX-XX]" --body "Canceled: [reason]"
```

### **Task Closure Checklist** ‚úÖ
Before moving to next task, ALWAYS:
1. **List current tasks**: `mcp_linear_list_my_issues --limit 20`
2. **Update completed tasks**: Set to "Done" state
3. **Cancel abandoned tasks**: Set to "Canceled" with comment
4. **Verify no IN_PROGRESS tasks**: Unless actively working on them
5. **Document completion**: Add final comment summarizing work

## üö´ **Blocking System**
- **Use Linear UI**: Press `M` + `B` to block issues
- **Visual indicators**: üü† blocked, üî¥ blocking
- **Don't create custom "blocked" status**

## üéØ **Efficiency Rules**

### **‚úÖ DO**
1. **Use known IDs** - avoid list/get calls
2. **Search memory first** - check patterns using Graphiti
3. **One label per group** - avoid conflicts
4. **Visual naming** - use emojis consistently
5. **Store new patterns** - record successful workflows
6. **Close tasks properly** - update status before moving on
7. **Reference NMSTX-XX** - in all commits and branches

### **‚ùå DON'T**
1. **Call list APIs** for known values
2. **Mix label groups** - causes validation errors
3. **Skip memory search** - creates duplicates
4. **Leave tasks open** - always update status
5. **Use wrong prefix** - it's NMSTX, not NAM

## üîß **Common Patterns**

### **Agent Development**
```bash
# Epic: --labelIds '["b7099189-1c48-4bc6-b329-2f75223e3dd1", "500151c3-202d-4e32-80b8-82f97a3ffd0f"]'
# API: --labelIds '["b7099189-1c48-4bc6-b329-2f75223e3dd1", "f7f8e07e-24ad-43cc-b8e9-46e1cf785ef8"]'  
# Testing: --labelIds '["b7099189-1c48-4bc6-b329-2f75223e3dd1", "70383b36-310f-4ce0-9595-5fec6193c1fb"]'

# Commit at each subtask completion
git commit -m "feat(NMSTX-XX): complete agent initialization"
git commit -m "test(NMSTX-XX): add agent integration tests"
```

### **Bug Fixes**
```bash
--labelIds '["8b4eb347-3278-4844-9a9a-bbe724fb5684", "[COMPONENT-ID]"]' --priority 1
```

### **Memory Integration**
```bash
# Store successful Linear workflows
mcp_agent-memory_add_memory \
  --name "Linear Workflow Pattern" \
  --episode_body "Successful issue creation pattern with known IDs" \
  --source "text"

# Commit pattern documentation
git add .cursor/rules/ && git commit -m "docs(NMSTX-XX): capture Linear workflow pattern"
```

## üîÄ **Git Integration with Linear**

### **Branch Naming**
```bash
# Always use Linear issue ID in branch name
git checkout -b NMSTX-XX-brief-description
```

### **Commit Messages**
```bash
# Reference Linear issue in commits
git commit -m "feat(NMSTX-XX): implement feature"
git commit -m "fix(NMSTX-XX): resolve blocking issue"
git commit -m "test(NMSTX-XX): add coverage for edge case"
```

### **Milestone Completion**
```bash
# When completing major milestones
git tag -a "NMSTX-XX-complete" -m "Completed Linear issue NMSTX-XX"
git push origin NMSTX-XX-feature --tags
```

## üßπ **Task Hygiene**

### **Regular Task Review**
```bash
# Check for rogue tasks periodically
mcp_linear_list_my_issues --limit 50

# Clean up old IN_PROGRESS tasks
mcp_linear_update_issue --id "[old-task-id]" --stateId "1551da4c-03c1-4169-9690-8688f95f9e87"  # Done
# OR
mcp_linear_update_issue --id "[old-task-id]" --stateId "15aaa37e-a012-43a8-92d2-b6ff3399137e"  # Canceled
```

### **Before Starting New Work**
1. **Check existing tasks**: `mcp_linear_list_my_issues`
2. **Close completed work**: Update all finished tasks
3. **Cancel abandoned work**: With explanatory comments
4. **Verify clean state**: No unexpected IN_PROGRESS tasks

---

**Remember**: Use known values, avoid redundant API calls, leverage memory patterns to track successful workflows. **Always use NMSTX-XX prefix** and **close tasks properly** before moving to new work. No rogue tasks left behind!
