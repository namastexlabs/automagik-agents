---
description: Linear workflow integration, issue management, and project organization for automagik-agents
globs: **/*
alwaysApply: true
---

# Linear Project Management Integration

**MANDATORY**: Use Linear for ALL development work. Linear provides comprehensive project management with issues, projects, cycles, and Git integration.

## 🚀 Core Linear Workflow

### **Issue-Driven Development**
```bash
# Create issues for all development work
mcp_linear_create_issue --title "Create Discord Agent" --teamId "<team-id>" --priority 2

# Update issue status as you progress
mcp_linear_update_issue --id "<issue-id>" --stateId "<in-progress-state-id>"

# Add progress comments
mcp_linear_create_comment --issueId "<issue-id>" --body "Implementation progress update"
```

### **Git Integration Workflow**
```bash
# Get auto-generated branch name from Linear
mcp_linear_get_issue_git_branch_name --id "<issue-id>"

# Create branch using Linear's naming convention
git checkout -b feature/nam-123-create-discord-agent

# Linear automatically links PRs when using proper branch names
git push origin feature/nam-123-create-discord-agent
```

## 🗂️ Linear Hierarchy & Organization

### **Projects** (Large Initiatives)
```bash
# Create projects for major features/releases
mcp_linear_create_project --name "AI Agent Framework v2.0" --teamId "<team-id>"

# Get project details and progress
mcp_linear_get_project --query "AI Agent Framework"

# List all projects
mcp_linear_list_projects --teamId "<team-id>"
```

### **Issues** (Individual Tasks)
```bash
# Create detailed issues with full context
mcp_linear_create_issue \
  --title "Implement memory persistence for agents" \
  --description "Add PostgreSQL integration for conversation history" \
  --teamId "<team-id>" \
  --priority 2 \
  --projectId "<project-id>" \
  --labelIds '["bug", "feature"]'

# Query issues by various criteria
mcp_linear_list_issues --assigneeId "<user-id>" --limit 20
mcp_linear_list_my_issues --limit 10

# Get detailed issue information
mcp_linear_get_issue --id "<issue-id>"
```

### **Cycles** (Sprint Management)
- **1-8 week focused work periods**
- **Automatic rollover** of incomplete issues
- **Progress tracking** with cycle graphs
- **Team momentum** through focused iterations

## 🔄 Workflow States & Transitions

### **Standard Issue Lifecycle**
```
Triage → Todo → In Progress → In Review → Done
   ↓        ↓         ↓           ↓         ↓
Backlog  Canceled  Duplicate   Canceled   Done
```

### **State Management**
```bash
# Check available states for team
mcp_linear_list_issue_statuses --teamId "<team-id>"

# Update issue state
mcp_linear_update_issue --id "<issue-id>" --stateId "<state-id>"

# Get specific state information
mcp_linear_get_issue_status --query "In Progress" --teamId "<team-id>"
```

## 🏷️ Labels & Categorization

### **Standard Labels**
```bash
# List available labels
mcp_linear_list_issue_labels --teamId "<team-id>"

# Common label categories:
# - Type: Bug, Feature, Improvement
# - Component: Agent, API, Tool, Memory
# - Priority: Critical, High, Medium, Low
# - Area: Frontend, Backend, DevOps, Documentation
```

### **Issue Organization**
```bash
# Create issues with labels for better organization
mcp_linear_create_issue \
  --title "Fix memory leak in agent processing" \
  --labelIds '["bug", "agent", "critical"]' \
  --priority 1
```

## 🔧 Development Workflow Patterns

### **Agent Development Workflow**
1. **Project Setup**: Create project for agent initiative
2. **Issue Creation**: Break down into specific implementation tasks
3. **Branch Creation**: Use Linear's auto-generated branch names
4. **Implementation**: Update issue status and add progress comments
5. **Code Review**: Move to "In Review" state
6. **Completion**: Merge PR and Linear auto-completes issue

### **Feature Development Pattern**
```bash
# 1. Create feature project
mcp_linear_create_project --name "Memory System Enhancement" --teamId "<team-id>"

# 2. Create implementation issues
mcp_linear_create_issue --title "Add PostgreSQL memory persistence" --projectId "<project-id>"
mcp_linear_create_issue --title "Implement memory cleanup jobs" --projectId "<project-id>"

# 3. Work in cycles
# Add issues to current cycle, track progress, roll incomplete work forward

# 4. Use Git integration
# Get branch name: feature/nam-456-add-postgresql-memory-persistence
# Linear tracks PR status and auto-updates issue states
```

### **Bug Triage & Resolution**
```bash
# 1. Create bug with full context
mcp_linear_create_issue \
  --title "Agent fails to load with custom tools" \
  --description "Error occurs when registering custom tools in MyAgent class" \
  --labelIds '["bug"]' \
  --priority 1

# 2. Assign and prioritize
mcp_linear_update_issue --id "<issue-id>" --assigneeId "<dev-id>" --priority 1

# 3. Track resolution
# Move through states: Triage → In Progress → In Review → Done
```

## 📊 Project Tracking & Analytics

### **Progress Monitoring**
```bash
# View project progress
mcp_linear_get_project --query "Automagik Agents"

# Check team workload
mcp_linear_list_issues --assigneeId "<user-id>" --limit 50

# Monitor cycle progress
# Linear provides built-in cycle graphs and completion tracking
```

### **Reporting & Insights**
- **Project Progress**: Visual timeline and completion tracking
- **Cycle Velocity**: Issue completion rates over time
- **Team Load**: Assignment distribution and capacity
- **Label Analytics**: Issue categorization and trends

## 👥 Team Collaboration

### **User & Team Management**
```bash
# List team members
mcp_linear_list_users --random_string "dummy"

# Get user details
mcp_linear_get_user --query "felipe@namastex.ai"

# Assign issues
mcp_linear_update_issue --id "<issue-id>" --assigneeId "<user-id>"
```

### **Communication & Updates**
```bash
# Add detailed progress comments
mcp_linear_create_comment --issueId "<issue-id>" --body "
## Implementation Progress
- ✅ PostgreSQL integration complete
- ✅ Memory cleanup job scheduled
- 🔄 Testing memory persistence patterns
- ⏳ Next: Integration tests
"

# List issue comments for context
mcp_linear_list_comments --issueId "<issue-id>"
```

## 🔗 Integration & Automation

### **Git Workflow Integration**
- **Auto Branch Naming**: `feature/nam-123-implement-memory-system`
- **PR Linking**: Automatic issue linking via branch names
- **Status Updates**: PR creation → "In Progress", PR merge → "Done"
- **Comment Sync**: PR comments can sync with Linear

### **Development Tool Integration**
- **Slack Integration**: Issue updates in dedicated channels
- **VS Code**: Linear extension for issue management
- **GitHub/GitLab**: Automatic PR workflow integration

## 📋 Linear Best Practices

### **Issue Creation Guidelines**
```bash
# ✅ GOOD: Descriptive, actionable issues
mcp_linear_create_issue \
  --title "Implement rate limiting for agent API endpoints" \
  --description "Add Redis-based rate limiting to prevent API abuse:
  - 100 requests/minute per API key
  - Different limits for different endpoint types
  - Graceful error responses with retry headers" \
  --priority 2 \
  --labelIds '["feature", "api"]'

# ❌ BAD: Vague, non-actionable
mcp_linear_create_issue --title "Fix stuff" --description "Something is broken"
```

### **Project Organization Strategy**
- **Large Projects**: Major features, releases, initiatives
- **Component Projects**: Agent system, API layer, memory system
- **Time-Boxed Projects**: Sprint-based feature development
- **Maintenance Projects**: Bug fixes, technical debt, documentation

### **Workflow State Management**
- **Triage**: New issues requiring evaluation
- **Todo**: Ready for development, properly scoped
- **In Progress**: Actively being worked on
- **In Review**: Code review, testing, validation
- **Done**: Completed and deployed

## 🎯 Quality Control Integration

### **Before Issue Completion**
- [ ] All acceptance criteria met
- [ ] Code follows automagik-agents patterns
- [ ] Tests written and passing
- [ ] Documentation updated
- [ ] Memory updated with insights
- [ ] Linear issue status reflects actual progress

### **Issue Review Criteria**
- **Clear acceptance criteria** defined
- **Proper labels and prioritization** applied
- **Assignee and timeline** established
- **Project association** for larger initiatives
- **Git branch integration** working correctly

## 💾 Memory Integration with Linear

### **Development Pattern Recording**
```bash
# Before starting work
mcp_memories_search_memory --query "agent development patterns linear"

# During development - use Linear comments for progress tracking
mcp_linear_create_comment --issueId "<issue-id>" --body "
Discovery: AutomagikAgent extension requires specific tool registration sequence.
Pattern: super().__init__() → set _code_prompt_text → register_default_tools()
"

# After completion - record insights
mcp_memories_add_memories --text "Linear workflow: Created NAM-123 for Discord agent implementation. Used auto-branch naming feature, PR auto-linked, status transitioned automatically. Effective for tracking development progress."
```

## 🚦 Priority & Urgency Guidelines

### **Priority Levels**
- **🔴 Urgent (1)**: Production issues, security vulnerabilities, blocking bugs
- **🟠 High (2)**: Important features, significant improvements, major bugs
- **🟡 Medium (3)**: Standard features, minor improvements, non-critical bugs
- **🟢 Low (4)**: Nice-to-have features, documentation, technical debt

### **Due Date Management**
```bash
# Set due dates for time-sensitive work
mcp_linear_update_issue --id "<issue-id>" --dueDate "2025-12-31"

# Use cycles for sprint-based delivery
# Issues automatically roll to next cycle if incomplete
```

---

**Remember**: Linear replaces Task Master with a comprehensive issue tracking system. Use projects for organization, cycles for momentum, and Git integration for seamless development workflow.
