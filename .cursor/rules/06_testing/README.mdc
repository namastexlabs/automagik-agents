---
description: 
globs: 
alwaysApply: false
---
# Testing & Continuous Integration Guidelines

These rules standardise how we write tests, measure coverage and keep the main branch green.  They apply to *all* Python code under `src/`, `tests/` and any ad-hoc scripts.

## 1. Pyramid of Tests

| Layer | What we test | Where they live |
|-------|--------------|-----------------|
| **Unit** | Pure functions / classes in isolation | `tests/unit/` |
| **Integration** | Inter-module interactions (e.g. agent + tool) | `tests/integration/` |
| **End-to-End (E2E)** | Full user flow with mocked external APIs | `tests/e2e/` |

* Strive for **fast unit tests** (< 100 ms each) so they can run on every save.
* Integration & E2E tests may be slower but **must** use *recorded* fixtures or mocks – never hit live services in CI.

## 2. Naming & Structure

1. Test files are named `test_<module>.py`.
2. Each test function name starts with `test_` and describes the behaviour, e.g. `test_send_email_returns_success()`.
3. Use `pytest.mark.asyncio` for async functions.
4. Shared fixtures go in `conftest.py` at the nearest common directory.

## 3. Assertions & Helpers

• Prefer plain `assert` statements – no `unittest`.  
• Use `pytest.raises` when testing exceptions.  
• For snapshot comparisons, use `pytest-snapshots` with JSON serialisation.

## 4. Coverage Targets

The project *must* maintain **≥ 90 % statement coverage** on `src/` (excluding `__init__.py`).

CI will fail if:
```
pytest --cov=src --cov-fail-under=90
```
falls below threshold.

## 5. Running Tests Locally

```bash
# activate venv first
pytest -q         # run all tests quietly
pytest tests/unit # run only unit tests
pytest -k email   # keyword filter
```

Add `--snapshot-update` when intentionally updating snapshots.

## 6. Continuous Integration Pipeline

`/.github/workflows/ci.yml` (to be added) will perform the following steps:
1. Checkout & set up Python (currently 3.11).  
2. Cache the poetry/pip cache.  
3. Install dependencies via `make ci`.  
4. Run linters: `ruff`, `black --check`, `mypy`.
5. Execute `scripts/rules_enforcer.py` (see Rule-Enforcer section below).  
6. Run the full test suite with coverage.

The build **fails** on any linter error, rule violation or coverage drop.

## 7. Pre-commit Hooks

Developers are expected to install pre-commit hooks:
```bash
pip install pre-commit
pre-commit install
```
This runs `ruff`, `black`, `pytest --maxfail=1 --quick`, and `scripts/rules_enforcer.py` on staged files.

## 8. Rule-Enforcer Script

The script lives at `scripts/rules_enforcer.py` and guarantees:
* No direct `os.getenv(` outside `src/config.py`.
* All functions inside `src/tools/**/tool.py` that match `async def` declare `ctx` as first argument.
* No `.cursor/rules/` doc is missing from the master index.

It exits with non-zero status on the first violation.

> **Tip:** run it locally via `python scripts/rules_enforcer.py` before committing.

## 7. Mocking External Services

Use `pytest-httpx` or `responses` to stub HTTP calls.  Never hit real APIs in CI.

```python
@pytest.fixture
def gmail_stub(httpx_mock):
    httpx_mock.add_response(method="POST", url="https://gmail.googleapis.com/...", json={"id": "123"})
```

For SDKs that aren't HTTP-based (e.g. discord.py), use `unittest.mock.patch` to replace network methods.

## 8. Snapshot Testing Prompts

• Store prompt snapshots under `tests/snapshots/`.
• Update snapshots via `pytest --snapshot-update` and commit the diff **only** if you intentionally changed the prompt template.

## 9. Concurrency & Async Rules

• Always mark async tests with `@pytest.mark.asyncio`.
• Avoid `pytest-asyncio` default event loop reuse–set `asyncio_mode=strict` in `pytest.ini` to catch leaked tasks.

## 10. Performance Guardrails

Any single test must finish in **< 2 s** on a developer laptop.  Use `pytest.mark.slow` for longer integration tests; CI will run them in a separate stage.

## 11. AI Agent Guidance

• When creating a new tool, add stubbed responses first; don't write tests that fetch live data.
• If you change public function signatures, update corresponding tests **and** snapshots.
• Maintain coverage annotations; flagged lines with `# pragma: no cover` must be justified in the PR description.
