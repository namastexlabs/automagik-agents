---
description: "Comprehensive development workflow for automagik-agents using Task Master and iterative implementation"
globs:
  - "**/src/**"
  - "**/tests/**"
  - "**/scripts/**"
  - "**/*.py"
alwaysApply: false
priority: 7
---

# Development Workflow

## Primary Interaction Methods

The automagik-agents framework offers multiple ways to manage development:

1. **Task Master MCP Server (Primary for AI Agents)**:
   - **Recommended** for all AI-assisted development
   - MCP tools expose Task Master functionality through structured interfaces
   - Better performance and error handling than CLI parsing
   - All commands use project root: `/home/namastex/workspace/am-agents-labs`

2. **Direct Framework Commands (For Setup)**:
   ```bash
   # Project setup
   bash scripts/install/setup.sh --mode local
   
   # Agent management
   agent dev                    # Development mode
   agent start                  # Production mode
   agent logs                   # View logs
   ```

## Development Workflow Phases

### Phase 1: Project Initialization

**Initialize Task Master tracking (required for substantial work):**
```bash
# Initialize project tracking

# For feature work, create initial tasks
mcp_taskmaster-ai_add_task --prompt "Feature/improvement description" --projectRoot "/home/namastex/workspace/am-agents-labs"

# For complex work, parse requirements if available
mcp_taskmaster-ai_parse_prd --projectRoot "/home/namastex/workspace/am-agents-labs" --input "scripts/prd.txt"
```

### Phase 2: Task Analysis & Planning

**Analyze current work:**
```bash
# View all tasks and status
mcp_taskmaster-ai_get_tasks --projectRoot "/home/namastex/workspace/am-agents-labs"

# Find next logical task
mcp_taskmaster-ai_next_task --projectRoot "/home/namastex/workspace/am-agents-labs"

# Analyze complexity for intelligent breakdown
mcp_taskmaster-ai_analyze_project_complexity --projectRoot "/home/namastex/workspace/am-agents-labs" --research true
```

**Break down complex work:**
```bash
# View specific task details
mcp_taskmaster-ai_get_task --id "1" --projectRoot "/home/namastex/workspace/am-agents-labs"

# Expand complex tasks into manageable subtasks
mcp_taskmaster-ai_expand_task --id "1" --research true --projectRoot "/home/namastex/workspace/am-agents-labs"

# Clear and regenerate subtasks if needed
mcp_taskmaster-ai_clear_subtasks --id "1" --projectRoot "/home/namastex/workspace/am-agents-labs"
mcp_taskmaster-ai_expand_task --id "1" --force true --research true --projectRoot "/home/namastex/workspace/am-agents-labs"
```

### Phase 3: Iterative Implementation

**For each subtask, follow this iterative cycle:**

#### Iteration 1: Understanding & Planning

1. **Understand the Goal**:
   ```bash
   mcp_taskmaster-ai_get_task --id "1.1" --projectRoot "/home/namastex/workspace/am-agents-labs"
   ```

2. **Mark Work in Progress**:
   ```bash
   mcp_taskmaster-ai_set_task_status --id "1.1" --status "in-progress" --projectRoot "/home/namastex/workspace/am-agents-labs"
   ```

3. **Initial Exploration & Planning**:
   - Explore codebase to identify precise files and functions
   - Determine intended code changes and their locations
   - Identify potential challenges and dependencies
   - Research AutomagikAgent patterns, memory templates, API structures

4. **Log the Plan**:
   ```bash
   mcp_taskmaster-ai_update_subtask --id "1.1" --prompt "INITIAL PLAN:
   
   Files to modify:
   - src/agents/simple/[agent_name]/agent.py
   - src/agents/simple/[agent_name]/prompts.py
   
   Approach:
   - Extend AutomagikAgent base class
   - Implement process_message() method
   - Use memory templates: {{user_name}}, {{context}}
   
   Potential challenges:
   - Memory variable configuration
   - Tool registration patterns
   - Session management" --projectRoot "/home/namastex/workspace/am-agents-labs"
   ```

#### Iteration 2+: Implementation & Refinement

5. **Begin Implementation**:
   - Start coding based on logged plan
   - Follow patterns from `12_feature_development.mdc`
   - Use established AutomagikAgent, tool, and API patterns

6. **Regular Progress Logging**:
   ```bash
   # Log what works, what doesn't, and key discoveries
   mcp_taskmaster-ai_update_subtask --id "1.1" --prompt "PROGRESS UPDATE:

   ✅ What worked:
   - AutomagikAgent extension pattern confirmed
   - Memory template variables loading correctly
   - {{user_name}} and {{recent_context}} working as expected

   ❌ What didn't work:
   - Initial tool registration approach failed
   - Need to use ToolRegistry pattern instead
   
   🔍 Key discoveries:
   - Tool interface must inherit from PydanticAI Tool class
   - Memory session isolation requires explicit session_name parameter
   
   📝 Next steps:
   - Implement ToolRegistry pattern
   - Test memory persistence across sessions" --projectRoot "/home/namastex/workspace/am-agents-labs"
   ```

7. **Critical Learning Documentation**:
   - **Log fundamental truths discovered**
   - **Document what didn't work and why**
   - **Record successful code snippets and configurations**
   - **Note decisions made, especially with user input**
   - **Document deviations from initial plan with reasoning**

#### Iteration 3: Verification & Completion

8. **Code Quality Review**:
   - Verify follows AutomagikAgent patterns
   - Check memory template variable usage
   - Ensure proper async/await patterns
   - Validate error handling
   - Test memory persistence

9. **Update Rules** (if new patterns discovered):
   ```bash
   # Add insights to memory for future reference
   mcp_memories_add_memories --text "AutomagikAgent extension pattern: Always use super().__init__ with agent_name, system_prompt, and tools parameters. Memory templates work with {{variable}} syntax in system prompts."
   ```

10. **Mark Complete**:
    ```bash
    mcp_taskmaster-ai_set_task_status --id "1.1" --status "done" --projectRoot "/home/namastex/workspace/am-agents-labs"
    ```

### Phase 4: Integration & Testing

**After subtask completion:**

11. **Integration Testing**:
    - Test agent functionality end-to-end
    - Verify API endpoints work with authentication
    - Check memory persistence across sessions
    - Validate tool integration

12. **Update Dependent Tasks** (if implementation differs from plan):
    ```bash
    # Update future tasks based on implementation learnings
    mcp_taskmaster-ai_update --from "2" --prompt "Implementation of task 1 revealed:
    - Memory templates work differently than planned
    - API authentication patterns established
    - Tool registration requires ToolRegistry approach
    
    Update subsequent tasks to reflect these patterns." --projectRoot "/home/namastex/workspace/am-agents-labs"
    ```

13. **Add New Tasks** (if discoveries reveal new work):
    ```bash
    mcp_taskmaster-ai_add_task --prompt "Create documentation for new ToolRegistry pattern discovered during agent implementation" --dependencies "1" --projectRoot "/home/namastex/workspace/am-agents-labs"
    ```

### Phase 5: Completion & Knowledge Capture

14. **Generate Task Documentation**:
    ```bash
    mcp_taskmaster-ai_generate --projectRoot "/home/namastex/workspace/am-agents-labs"
    ```

15. **Update Project Memory**:
    ```bash
    # Capture key learnings for future work
    mcp_memories_add_memories --text "Agent development workflow established: 1) Extend AutomagikAgent, 2) Use memory templates with {{variables}}, 3) Register tools via ToolRegistry, 4) Test memory persistence across sessions"
    ```

16. **Version Control** (if using Git):
    ```bash
    git add .
    git commit -m "feat(agent): Implement [feature] for task [id]

    - Extended AutomagikAgent with [specific capabilities]
    - Added memory templates: {{variable_names}}
    - Integrated [tool] functionality
    - Updated [rule files] with new patterns"
    ```

## Task Status Management

Use consistent status progression:

- **pending**: Ready to work on (all dependencies satisfied)
- **in-progress**: Currently being implemented
- **review**: Implementation complete, needs verification
- **done**: Completed and verified
- **deferred**: Postponed for later
- **cancelled**: No longer needed

## Task Structure for automagik-agents

Every task should include:

- **title**: Clear, actionable description
- **description**: Context about what needs to be done
- **details**: Implementation approach and technical requirements
- **testStrategy**: How to verify completion
- **dependencies**: Prerequisite task IDs
- **priority**: high/medium/low based on impact

**Example task structure:**
```json
{
  "id": 1,
  "title": "Create WhatsApp Agent with Evolution API",
  "description": "Implement WhatsApp messaging agent using Evolution API for external communication",
  "status": "pending",
  "dependencies": [],
  "priority": "high",
  "details": "1. Extend AutomagikAgent base class\n2. Configure Evolution API credentials\n3. Implement message processing with {{user_name}} templates\n4. Add webhook handling for incoming messages\n5. Test session management",
  "testStrategy": "Deploy agent, send test message via WhatsApp, verify response and memory persistence",
  "subtasks": []
}
```

## Memory Integration Workflow

**When developing memory-aware features:**

1. **Define Memory Variables**:
   ```python
   # In system prompts, use consistent variable naming
   SYSTEM_PROMPT = """You are a specialized agent.
   
   User Information:
   - Name: {{user_name}}
   - Preferences: {{user_preferences}}
   
   Conversation Context:
   - Recent: {{recent_context}}
   - Session: {{session_context}}
   
   Feature Context:
   - {{feature_specific_context}}
   """
   ```

2. **Add Memory in Agent Processing**:
   ```python
   async def process_message(self, message: str, session_name: str = "default") -> str:
       # Extract relevant context
       context = self.extract_context(message)
       
       # Add to memory
       await self.memory_manager.add_memory(
           agent_id=self.agent_id,
           name="feature_specific_context",
           content=context,
           session_name=session_name
       )
       
       return await self.run_agent(message, session_name)
   ```

3. **Test Memory Persistence**:
   - Verify variables populate in prompts
   - Test session isolation
   - Check memory retrieval across conversations

## Dependency Management

**Handle task dependencies systematically:**

```bash
# Add dependencies between tasks
mcp_taskmaster-ai_add_dependency --id "2" --dependsOn "1" --projectRoot "/home/namastex/workspace/am-agents-labs"

# Validate dependency structure
mcp_taskmaster-ai_validate_dependencies --projectRoot "/home/namastex/workspace/am-agents-labs"

# Fix any dependency issues
mcp_taskmaster-ai_fix_dependencies --projectRoot "/home/namastex/workspace/am-agents-labs"
```

## Code Analysis & Pattern Recognition

**Use systematic approaches to understand the codebase:**

- **Search for patterns**: Use `grep_search` to find similar implementations
- **Agent patterns**: Look for `class.*AutomagikAgent` patterns
- **Memory patterns**: Search for `{{.*}}` template variable usage
- **API patterns**: Find `@router\.` endpoint definitions
- **Tool patterns**: Search for Pydantic AI tool interfaces

## Quality Gates

**Before marking any task as done:**

- [ ] Follows AutomagikAgent extension patterns
- [ ] Uses memory templates appropriately 
- [ ] Implements proper error handling
- [ ] Includes appropriate logging
- [ ] Has basic test coverage
- [ ] Updates relevant documentation/rules
- [ ] Task Master subtask details are comprehensive
- [ ] Memory system integration tested
- [ ] API endpoints authenticated (if applicable)

## Configuration Management

**Project configuration locations:**

- **Database**: PostgreSQL connection via standard patterns
- **Environment**: Use `.env` files for secrets
- **Agent configs**: Stored in agent-specific directories
- **API settings**: FastAPI configuration in `src/api/`
- **Memory settings**: PostgreSQL-based persistence

**Setup verification:**
```bash
# Verify project setup
bash scripts/install/setup.sh

# Check agent status
agent status

# Verify API endpoints
curl -H "X-API-Key: your-key" http://localhost:8000/api/v1/health
```

---

---
description: "Comprehensive development workflow for automagik-agents using Task Master and iterative implementation"
globs:
  - "**/src/**"
  - "**/tests/**"
  - "**/scripts/**"
  - "**/*.py"
alwaysApply: false
priority: 7
---

# Development Workflow

**Key Principle**: Use Task Master for systematic development, leverage memory for intelligent context, and follow established AutomagikAgent patterns. Every piece of work should enhance the framework's capabilities while maintaining consistency and quality.

- Check tool function signature matches Pydantic AI requirements
- Review tool permissions and credentials

---

**Remember**: Automagik Agents prioritizes rapid development while maintaining production quality. Leverage existing patterns, extend thoughtfully, and focus on agent capabilities rather than infrastructure reinvention.
