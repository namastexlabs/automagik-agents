---
description: 
globs: 
alwaysApply: false
---
# 01 · Project On-Boarding & Repository Layout

Welcome to **Automagik Agents**—a layer on top of Pydantic AI that lets us ship production-grade AI agents in record time.  This document gives engineers (human _or_ AI) everything needed to pull the repo, run the stack and understand its anatomy.

---
## 1. Technical Prerequisites

• Python ≥ 3.10 (3.11 recommended)   
• [uv](mdc:https:/docs.astral.sh/uv) package manager → `pipx install uv`   
• Docker + docker-compose (only if you need Postgres / Neo4j locally)

---
## 2. Installation Options (Choose One)

### Option A: Comprehensive Installer (Recommended)

The modular installer handles everything automatically and **works out-of-the-box**:

```bash
# 1) Clone & navigate
git clone https://github.com/namastexlabs/automagik-agents-labs.git
cd automagik-agents-labs

# 2) Interactive installation (recommended for first-time users)
./scripts/install/setup.sh

# 3) Fully automated with API keys (perfect for CI/deployment)
./scripts/install/setup.sh \
  --component agents \
  --mode local \
  --non-interactive \
  --openai-key sk-your-openai-key-here \
  --discord-token your-discord-bot-token \
  --install-service

# 4) Docker deployment (production-ready in 3 minutes)
./scripts/install/setup.sh --component agents --mode docker --non-interactive
```

**What the installer provides:**
- ✅ **Complete `.env` configuration** (130+ variables with working defaults)
- ✅ **Auto-generated secure API keys** for authentication
- ✅ **Smart dependency management** (Python, Docker, system packages)
- ✅ **Health checks & validation** (API + database connectivity)
- ✅ **Service management** (systemd integration on Linux)
- ✅ **Helper commands** (`agent start/stop/logs/health`)
- ✅ **Database setup** (PostgreSQL via Docker or external)
- ✅ **Working endpoints** immediately accessible

### Option B: Manual Setup (Advanced Users)

For those who prefer manual control:

```bash
# 1) Clone & move in
git clone https://github.com/namastexlabs/automagik-agents-labs.git
cd automagik-agents-labs

# 2) Create isolated env (uv is ~10× faster than venv+pip)
uv venv
source .venv/bin/activate        # Windows → .venv\Scripts\activate

# 3) Install editable package + dev deps
uv pip install -e .

# 4) Copy environment template and configure
cp .env-example .env
# Edit .env with your OPENAI_API_KEY, DISCORD_BOT_TOKEN, etc.

# 5) Setup database and run
# ... (see advanced setup in docs/)
```

**Note:** Manual setup requires significant configuration. The installer is strongly recommended.

---
## 3. Environment Configuration Made Easy

The new `.env-example` provides **working defaults** for everything except API keys:

```bash
# Only these 2-3 values need configuration for full functionality:
OPENAI_API_KEY=sk-your-openai-key-here        # Required for AI features
DISCORD_BOT_TOKEN=your-discord-token-here     # Required for Discord integration
AM_API_KEY=                                   # Auto-generated by installer

# Everything else works out-of-the-box:
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/automagik  # ✅ Working
AM_HOST=0.0.0.0                              # ✅ Working
AM_PORT=8881                                 # ✅ Working
AM_ENV=development                           # ✅ Working
# ... 120+ more pre-configured variables
```

**Get your API keys:**
- **OpenAI**: https://platform.openai.com/api-keys
- **Discord Bot**: https://discord.com/developers/applications

---
## 4. Everyday Developer Workflow

| Task | Command |
|------|---------|
| **Start development** | `agent start` or `python -m src` |
| **View logs** | `agent logs` (with colors!) |
| **Health check** | `agent health` or `curl localhost:8881/health` |
| **Stop service** | `agent stop` |
| **Format & lint** | `pre-commit run --all-files` |
| **Run tests** | `pytest -q` |
| **Chat with agent** | `automagik-agents agent chat start --agent simple` |
| **CLI utilities** | `automagik-agents --help` |
| **Rule enforcement** | `python scripts/rules_enforcer.py` |

**Service Management (if installed with `--install-service`):**
```bash
agent start      # Start the service
agent stop       # Stop the service  
agent restart    # Restart the service
agent status     # Full service status
agent logs       # Live colored logs
agent health     # Quick API health check
```

> Tip: Helper commands are available immediately after installation

---
## 5. Installation Validation

The installer automatically validates your setup:

```bash
# ✅ System checks
✅ Python 3.10.17 found
✅ Docker already installed: Docker version 28.1.1
✅ All prerequisites satisfied

# ✅ Environment setup  
✅ .env file created from .env-example template
✅ Generated secure API key for automagik-agents authentication
✅ Environment configuration is valid

# ✅ Dependency installation
✅ Virtual environment created at ./venv
✅ Python dependencies installed successfully
✅ Python environment setup completed

# ✅ Database connectivity
✅ Database connection successful
✅ Connected to: PostgreSQL 15.13
✅ Database connectivity verified

# ✅ Working endpoints
📡 Service URLs:
• API Server: http://localhost:8881
• Health Check: http://localhost:8881/health  
• API Documentation: http://localhost:8881/docs
```

---
## 6. Top-Level Directory Map

```
├── src/                  # Production code (importable as `automagik_agents`)
│   ├── agents/           # Agent implementations & templates
│   │   ├── simple/ …
│   │   └── models/       # Shared ABCs (AutomagikAgent, etc.)
│   ├── tools/            # Self-contained tool packages (see 03_tools rules)
│   ├── api/              # FastAPI app, routers & models
│   ├── cli/              # Typer CLI entry-points
│   ├── db/               # DB migrations & helpers
│   ├── config.py         # Pydantic Settings (single source of truth)
│   └── main.py           # `python -m src.main` boots everything
├── scripts/              # One-off utilities & CI rule-enforcer
│   ├── install/          # Comprehensive modular installer system ⭐
│   │   ├── setup.sh      # Main installer orchestrator
│   │   ├── lib/          # Shared installation utilities
│   │   ├── installers/   # Component-specific installation logic
│   │   └── templates/    # Helper scripts and configs
│   └── rules_enforcer.py # Automated rule violation checker
├── tests/                # Unit / integration tests (pytest)
├── docker/               # Compose files for Postgres, Neo4j, etc.
├── .cursor/rules/        # Engineering rulebook (start at 00_index.mdc)
├── .env-example          # Complete working environment template ⭐
├── pyproject.toml        # Package metadata and dependencies
└── uv.lock               # Exact dependency versions (generated by uv)
```

---
## 7. Architectural Overview

1. **Agents** – subclasses of `AutomagikAgent` that encapsulate persona, memory and tool registration.
2. **Tools** – asynchronous functions wrapped via `pydantic_ai.tools.Tool`.  Each lives in `src/tools/<name>/`.
3. **Memory System** – pluggable providers (Postgres, Supabase, etc.) located under `src/tools/memory/`.
4. **API** – REST interface (`src/api`) exposing agent invocation, memory CRUD, session history.
5. **CLI** – developer ergonomics (`src/cli`) mirroring API capabilities for local testing.
6. **Persistence** – SQL (Postgres) for messages, optional Neo4j for knowledge graph episodes.

---
## 8. Tests & CI Quick Facts

• Tests live under `tests/` (see 06_testing rules for pyramid strategy).   
• Coverage must stay ≥ 90 %. CI will fail otherwise.   
• `pre-commit install` hooks lint, format, enforce rules and run a quick test subset.
• Rule enforcer (`scripts/rules_enforcer.py`) automatically checks for violations like:
  - Direct `os.getenv()` usage (must use `src.config.settings`)
  - Tool functions missing `ctx` parameter
  - Missing documentation in rules index

---
## 9. Installation Modes Comparison

| Feature | Local Install | Docker Install |
|---------|---------------|----------------|
| **Setup Time** | 3-5 minutes | 2-3 minutes |
| **Development Speed** | ⚡ Fastest (direct Python) | 🐳 Rebuild needed for changes |
| **Isolation** | 🔧 Virtual environment | 🔒 Full container isolation |
| **Database** | 🗄️ Docker container | ✅ Included in stack |
| **System Service** | ✅ Optional systemd | ❌ Container management |
| **Resource Usage** | 💚 Lower | 📦 Higher |
| **Debugging** | 🔍 Direct access | 🔧 Via docker exec |
| **Production Ready** | 🛠️ Needs deployment setup | ✅ Ready to deploy |

**Recommendation:**
- **Local**: Active development and debugging
- **Docker**: Production deployments and testing

---
## 10. Common Troubleshooting

| Symptom | Fix |
|---------|-----|
| `os.getenv` violation in CI | Use `from src.config import settings` |
| Tool fails signature check | First param must be `ctx: RunContext[dict]` |
| `psycopg2` build error on M1 | `brew install libpq && export LDFLAGS="-L/opt/homebrew/opt/libpq/lib"` |
| Import mismatch after `uv` update | Delete `.venv` and run installer again |
| API server won't start | Check if port 8881 is available |
| Docker containers fail | Ports 8881/5432 might be in use |
| "Database connection failed" | Ensure PostgreSQL container is running |
| Missing API functionality | Check OPENAI_API_KEY and DISCORD_BOT_TOKEN in `.env` |

**Quick diagnostics:**
```bash
# Check service status
agent status

# Validate configuration  
python scripts/rules_enforcer.py

# Test API endpoint
curl http://localhost:8881/health

# Check logs for errors
agent logs
```

---
## 11. Contribution Workflow (TL;DR)

1. Branch off `main`: `git checkout -b feature/<short-desc>`
2. Write code + tests + docs.
3. Ensure `pre-commit run --all-files` passes.
4. Push & open PR → follow checklist in 09_style_pr.
5. Once approved, **Squash & Merge**.

---
## 12. Further Reading

• **Installation Details**: [`scripts/install/IMPROVED_INSTALLATION.md`](mdc:../../scripts/install/IMPROVED_INSTALLATION.md)  
• **Agent Development**: [`02_agents/README.mdc`](mdc:../02_agents/README.mdc)  
• **Tool Building**: [`03_tools/README.mdc`](mdc:../03_tools/README.mdc)  
• **Configuration**: [`04_config/README.mdc`](mdc:../04_config/README.mdc)

> **Success Guarantee**: Following this guide should give you a working Automagik Agents installation in under 5 minutes. If not, please open an issue with your installation logs.
