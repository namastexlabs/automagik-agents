---
description: "Rule system organization, loading optimization, and management strategies"
globs:
  - "**/.cursor/rules/**"
  - "**/README.md"
  - "**/docs/**"
alwaysApply: true
priority: 14
---

# Rule Organization & Management

## Rule System Architecture

**Inspired by claude-task-master's modular rule organization**, our system follows a hierarchical, purpose-driven structure:

### Always-Loaded Foundation (Priority 1)
```
00_agent_mission.mdc     # AI agent identity and mission-critical context
01_task_system.mdc      # Mandatory Task Master workflow integration
04_self_improve.mdc     # Continuous learning and pattern recognition
```

### Conditional Loading by Context (Priority 2)
```
02_agent_development.mdc    # Agent creation patterns
03_project_setup.mdc       # Installation and configuration
05_development_guide.mdc    # Core development patterns
06_memory_system.mdc       # Memory and conversation persistence
07_development_workflow.mdc # Iterative development process
08_api_development.mdc      # REST API patterns
09_dependencies.mdc        # Package and dependency management
10_database_config.mdc     # Database integration patterns
11_quality_testing.mdc     # Testing strategies and standards
12_feature_development.mdc # Feature implementation guides
13_performance_optimization.mdc # Performance patterns
14_rule_organization.mdc   # This file - meta-organization
```

## File Naming Conventions

### Pattern: `[NN]_[purpose]_[domain].mdc`

- **NN**: Two-digit priority (00-99)
  - `00-04`: Always-loaded essentials
  - `05-19`: Core development guides
  - `20-29`: Specialized tools/integrations
  - `30-39`: Advanced patterns
  - `90-99`: Meta/administrative

- **Purpose**: Single-word action/concept
  - `agent`, `api`, `memory`, `database`, `testing`, etc.

- **Domain**: Optional specialization
  - `development`, `optimization`, `integration`, etc.

### Examples:
```
✅ GOOD: 02_agent_development.mdc
✅ GOOD: 13_performance_optimization.mdc
✅ GOOD: 08_api_development.mdc

❌ BAD: agent_development_patterns.mdc
❌ BAD: development-workflow.mdc
❌ BAD: 2_agents.mdc
```

## Rule Content Structure

**Each rule file should follow this structure** (inspired by claude-task-master's consistency):

```markdown
---
description: One-line description of what the rule enforces
globs:
  - "**/*.py"
  - "**/specific/path/**"
alwaysApply: false
---

# Rule Title

## Overview
Brief description of the rule's purpose and scope.

## Implementation Patterns

### Pattern Name
- **Purpose**: What this pattern accomplishes
- **When to Use**: Specific scenarios or conditions
- **Implementation**: Step-by-step guidance

✅ **DO**: Positive examples with code
❌ **DON'T**: Anti-patterns with explanations

```python
# ✅ GOOD: Example implementation
class AutomagikAgent(BaseAgent):
    def __init__(self, agent_name: str, system_prompt: str):
        super().__init__(agent_name=agent_name, system_prompt=system_prompt)

# ❌ BAD: What not to do
class BadAgent:
    def __init__(self):
        pass  # Missing required parameters
```

## Quality Gates
- [ ] Checklist item 1
- [ ] Checklist item 2

## Cross-References
- Related rule: [`05_development_guide.mdc`](mdc:.cursor/rules/05_development_guide.mdc)
- See also: [`architecture_patterns.md`](mdc:docs/architecture_patterns.md)
```

## YAML Frontmatter Standards

### Required Fields
```yaml
---
description: "Clear, concise description (under 100 chars)"
globs:
  - "**/*.py"           # File patterns this rule applies to
  - "**/src/agents/**"  # More specific patterns
alwaysApply: false      # true only for 00-04 priority rules
---
```

### Optional Fields
```yaml
---
description: "..."
globs: [...]
alwaysApply: false
priority: 10            # Explicit priority override
dependencies:           # Rules this depends on
  - "00_agent_mission.mdc"
  - "01_task_system.mdc"
conflicts:              # Rules that conflict with this one
  - "legacy_patterns.mdc"
lastUpdated: "2024-01-15"
version: "2.1.0"
---
```

## Content Organization Patterns

### 1. Hierarchical Information Architecture

**Inspired by claude-task-master's clear separation**, organize content from general to specific:

```markdown
# Main Topic

## High-Level Overview
General principles and concepts

## Implementation Patterns
### Pattern 1: Common Use Case
### Pattern 2: Advanced Use Case
### Pattern 3: Edge Case

## Code Examples
### ✅ DO Examples
### ❌ DON'T Examples

## Quality Gates & Checklists

## Troubleshooting

## Cross-References
```

### 2. Cross-Reference System

**Use consistent linking patterns** like claude-task-master:

```markdown
- **Related Pattern**: See [`02_agent_development.mdc`](mdc:.cursor/rules/02_agent_development.mdc)
- **Implementation**: Refer to [`src/agents/models/automagik_agent.py`](mdc:src/agents/models/automagik_agent.py)
- **Examples**: Check [`examples/agent_templates/`](mdc:examples/agent_templates)
```

### 3. Progressive Disclosure

**Layer information by complexity**:

1. **Basic Pattern**: What most developers need
2. **Advanced Options**: For complex scenarios
3. **Expert Configuration**: For edge cases
4. **Troubleshooting**: When things go wrong

## Rule Maintenance Workflow

### 1. Regular Review Cycle

**Every sprint/iteration**:
```bash
# Check for outdated patterns
grep -r "TODO" .cursor/rules/
grep -r "FIXME" .cursor/rules/

# Validate cross-references
find .cursor/rules/ -name "*.mdc" -exec grep -l "mdc:" {} \;
```

### 2. Pattern Recognition Triggers

**Based on claude-task-master's self-improvement patterns**:

- **3+ Files Using Same Pattern**: Create new rule
- **Repeated Code Review Comments**: Update existing rule
- **Common Error Patterns**: Add to quality gates
- **New Library Integration**: Create integration guide
- **Performance Issues**: Add optimization patterns

### 3. Version Control Integration

**Track rule evolution**:
```bash
# Tag rule changes with semantic versioning
git tag -a rules-v2.1.0 -m "Added performance optimization patterns"

# Track rule usage metrics
git log --oneline .cursor/rules/ | head -20
```

## Quality Standards

### Content Quality Gates

**Before adding/updating any rule**:

- [ ] **Single Responsibility**: Rule addresses one clear concern
- [ ] **Actionable Guidance**: Provides specific implementation steps
- [ ] **Code Examples**: Includes both positive and negative examples
- [ ] **Cross-References**: Links to related rules and implementation files
- [ ] **Quality Gates**: Includes verification checklists
- [ ] **YAML Valid**: Frontmatter parses correctly
- [ ] **Glob Patterns**: File patterns are accurate and specific
- [ ] **Naming Convention**: Follows NN_purpose_domain.mdc pattern

### Content Standards

**Each rule must include**:
1. **Purpose Statement**: Why this rule exists
2. **Implementation Guide**: How to follow the rule
3. **Examples**: Working code demonstrating the pattern
4. **Anti-Patterns**: What NOT to do with explanations
5. **Quality Gates**: Verification checklist
6. **Troubleshooting**: Common issues and solutions

### Language Standards

```markdown
✅ **DO**: Use active voice and specific language
✅ **DO**: Include code examples for every pattern
✅ **DO**: Use consistent terminology throughout
✅ **DO**: Provide context for when to apply patterns

❌ **DON'T**: Use vague or general statements
❌ **DON'T**: Reference external docs without local examples
❌ **DON'T**: Create rules without clear implementation guidance
❌ **DON'T**: Duplicate content across multiple rules
```

## Performance Optimization

### Rule Loading Optimization

**Minimize cognitive load** by using the conditional loading system:

```python
# Pseudo-code for intelligent rule loading
def load_rules_for_context(file_path: str, current_task: str) -> List[Rule]:
    # Always load foundation rules
    rules = load_always_apply_rules()
    
    # Load contextual rules based on file patterns
    if file_path.match("**/agents/**"):
        rules.extend(load_rules_with_glob("**/agents/**"))
    
    if current_task == "api_development":
        rules.extend(load_rule("08_api_development.mdc"))
    
    return rules
```

### Content Caching

**Cache compiled rule content** for repeated access:

```python
# Rule content should be compiled and cached
@lru_cache(maxsize=100)
def compile_rule_content(rule_path: str) -> CompiledRule:
    content = read_rule_file(rule_path)
    return CompiledRule(
        frontmatter=parse_yaml(content.frontmatter),
        sections=parse_markdown_sections(content.body),
        cross_references=extract_references(content.body),
        code_examples=extract_code_blocks(content.body)
    )
```

## Rule Discovery & Navigation

### Auto-Generated Index

**Create dynamic rule index**:

```python
# Generate index from rule files
def generate_rule_index() -> Dict[str, Any]:
    return {
        "by_priority": group_rules_by_priority(),
        "by_domain": group_rules_by_domain(),
        "by_glob_pattern": group_rules_by_globs(),
        "dependency_graph": build_rule_dependency_graph(),
        "last_updated": get_last_update_times()
    }
```

### Smart Search

**Enable pattern-based rule discovery**:

```bash
# Find rules for specific contexts
./scripts/find-rules.py --context "agent development"
./scripts/find-rules.py --file-pattern "**/*.py" --priority "high"
./scripts/find-rules.py --problem "memory not persisting"
```

## Integration with Development Tools

### IDE Integration

**Make rules discoverable in development environment**:

```json
// .vscode/settings.json
{
  "cursor.rules.autoload": true,
  "cursor.rules.priority_threshold": 10,
  "cursor.rules.show_in_hover": true,
  "cursor.rules.pattern_matching": "intelligent"
}
```

### CI/CD Integration

**Validate rule quality in pipeline**:

```yaml
# .github/workflows/rule-quality.yml
name: Rule Quality Check
on: [push]
jobs:
  validate-rules:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Validate Rule Structure
        run: |
          python scripts/validate-rules.py
          python scripts/check-cross-references.py
          python scripts/verify-examples.py
```

## Evolution & Continuous Improvement

### Metrics & Analytics

**Track rule effectiveness**:

- **Usage Frequency**: Which rules are accessed most
- **Implementation Rate**: How often patterns are followed
- **Error Reduction**: Correlation between rules and bug reports
- **Development Speed**: Impact on development velocity

### Feedback Loop

**Continuous improvement process**:

1. **Monitor Usage**: Track which rules are most helpful
2. **Collect Feedback**: Developer experience with rule guidance
3. **Analyze Patterns**: Identify gaps in current rule coverage
4. **Update Content**: Evolve rules based on real usage
5. **Validate Changes**: Ensure updates improve clarity and utility

### Community Contribution

**Enable team contributions**:

```markdown
## Contributing to Rules

### Adding New Rules
1. Follow naming convention: `NN_purpose_domain.mdc`
2. Use rule content template
3. Include working code examples
4. Add quality gates checklist
5. Submit PR with rule validation

### Updating Existing Rules
1. Check for breaking changes
2. Update cross-references
3. Validate examples still work
4. Update version in frontmatter
```

---

**Remember**: Rules should be living documents that evolve with the codebase. They exist to accelerate development, not slow it down. Focus on patterns that repeatedly provide value and remove rules that become obsolete.
