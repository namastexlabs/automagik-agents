---
description: FastAPI development patterns, authentication, and endpoint creation for automagik-agents
globs: src/api/**/*,tests/**/*api*
alwaysApply: false
---
# API Development Guide

## üåê API Architecture Overview

**Documentation**: [api.md](mdc:docs/api.md) | [architecture.md](mdc:docs/architecture.md) | [configuration.md](mdc:docs/configuration.md)

### **MANDATORY FastAPI Structure**
```
src/api/
‚îú‚îÄ‚îÄ routes/                    # Endpoint handlers
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py           # Router registration
‚îÇ   ‚îú‚îÄ‚îÄ agent_routes.py       # Agent execution endpoints
‚îÇ   ‚îî‚îÄ‚îÄ custom_routes.py      # Your custom endpoints
‚îú‚îÄ‚îÄ models.py                 # Pydantic schemas
‚îú‚îÄ‚îÄ middleware.py             # HTTP middleware
‚îî‚îÄ‚îÄ memory_routes.py          # Memory API endpoints
```

### **Core Framework Features**
- **Auto-Authentication**: All `/api/v1/` endpoints protected
- **Agent Integration**: Direct agent execution via `/agent/{name}/run`
- **Memory Management**: Persistent conversation APIs
- **Auto-Documentation**: OpenAPI/Swagger at `/api/v1/docs`
- **Structured Errors**: Consistent error response format

## üîê Authentication System

### **API Key Middleware (Automatic)**
```bash
curl -X POST http://localhost:8000/api/v1/agent/simple_agent/run \
  -H "X-API-Key: your-api-key" \
  -H "Content-Type: application/json" \
  -d '{"message_content": "Hello", "session_name": "test"}'
```

### **Endpoint Authentication Pattern**
```python
from src.auth import verify_api_key
from fastapi import Depends

@router.post("/action", response_model=ActionResponse)
async def custom_action(
    request: ActionRequest,
    api_key: str = Depends(verify_api_key)  # REQUIRED for all endpoints
):
    """Custom business logic endpoint."""
    # Implementation
```

## ü§ñ Core Agent API Patterns

### **Standard Agent Endpoints**
```python
# Auto-generated for all agents:
GET    /api/v1/agent/                          # List all agents
GET    /api/v1/agent/{agent_name}/info         # Agent information
POST   /api/v1/agent/{agent_name}/run          # Execute agent
GET    /api/v1/agent/{agent_name}/memory       # List memories
POST   /api/v1/agent/{agent_name}/memory       # Add memory
```

### **Agent Request/Response Models**
```python
# src/api/models.py
class AgentRequest(BaseModel):
    message_content: str = Field(..., description="Message to send to agent")
    session_name: str = Field(default="default", description="Session identifier")
    user_id: Optional[int] = Field(None, description="User ID for tracking")

class AgentResponse(BaseModel):
    response: str = Field(..., description="Agent's response")
    status: str = Field(..., description="Response status")
    session_name: str = Field(..., description="Session identifier")
    timestamp: datetime = Field(default_factory=datetime.now)
```

### **Agent Execution Pattern**
```python
@router.post("/{agent_name}/run", response_model=AgentResponse)
async def run_agent(agent_name: str, request: AgentRequest):
    """Execute agent with message."""
    agent = AgentFactory.get_agent(agent_name)
    if not agent:
        raise HTTPException(status_code=404, detail="Agent not found")
    
    try:
        response = await agent.process_message(
            message=request.message_content,
            session_name=request.session_name
        )
        return AgentResponse(response=response, status="success")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
```

## üîß Custom Endpoint Development

### **5-Step Creation Process**
1. **Models**: Define Pydantic schemas in `src/api/models.py`
2. **Route Handler**: Create endpoint function with authentication
3. **Business Logic**: Implement core functionality
4. **Router Registration**: Add to `src/api/routes/__init__.py`
5. **Test**: Verify in auto-generated docs at `/api/v1/docs`

### **Custom Endpoint Template**
```python
# src/api/routes/custom_routes.py
from fastapi import APIRouter, HTTPException, Depends
from src.api.models import CustomRequest, CustomResponse
from src.auth import verify_api_key

router = APIRouter(prefix="/custom", tags=["Custom"])

@router.post("/action", response_model=CustomResponse)
async def custom_action(
    request: CustomRequest,
    api_key: str = Depends(verify_api_key)  # MANDATORY
):
    """Custom business logic endpoint."""
    try:
        result = await process_custom_request(request)
        return CustomResponse(
            success=True,
            data=result,
            message="Action completed successfully"
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
```

### **Custom Model Definitions**
```python
# src/api/models.py
class CustomRequest(BaseModel):
    action: str = Field(..., description="Action to perform")
    parameters: Dict[str, Any] = Field(default={}, description="Action parameters")
    session_name: Optional[str] = Field(None, description="Session context")

class CustomResponse(BaseModel):
    success: bool = Field(..., description="Operation success status")
    data: Optional[Dict[str, Any]] = Field(None, description="Response data")
    message: str = Field(..., description="Human-readable message")
    timestamp: datetime = Field(default_factory=datetime.now)
```

### **Router Registration**
```python
# src/api/routes/__init__.py
from fastapi import APIRouter
from .agent_routes import router as agent_router
from .custom_routes import router as custom_router

main_router = APIRouter()
main_router.include_router(agent_router)
main_router.include_router(custom_router)  # Add custom router
```

## üíæ Memory API Integration

### **Memory Endpoints (Auto-generated)**
```python
# Available for each agent:
GET    /api/v1/agent/{agent_name}/memory           # List memories
POST   /api/v1/agent/{agent_name}/memory           # Add memory
PUT    /api/v1/agent/{agent_name}/memory/{name}    # Update memory
DELETE /api/v1/agent/{agent_name}/memory/{name}    # Delete memory
```

### **Memory Models**
```python
class MemoryRequest(BaseModel):
    name: str = Field(..., description="Memory variable name")
    content: str = Field(..., description="Memory content")
    session_name: str = Field(default="default", description="Session identifier")

class MemoryResponse(BaseModel):
    name: str
    content: str
    session_name: str
    created_at: datetime
    updated_at: datetime
```

## üìä Error Handling

### **Structured Error Response**
```python
# src/api/models.py
class ErrorResponse(BaseModel):
    error: str = Field(..., description="Error type")
    message: str = Field(..., description="Error message")
    details: Optional[Dict[str, Any]] = Field(None, description="Additional details")
    timestamp: datetime = Field(default_factory=datetime.now)

# Custom exception handler
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    return JSONResponse(
        status_code=exc.status_code,
        content=ErrorResponse(
            error="HTTP_ERROR",
            message=exc.detail,
            details={"status_code": exc.status_code}
        ).dict()
    )
```

### **Custom Exceptions**
```python
# src/api/exceptions.py
class AgentNotFoundError(HTTPException):
    def __init__(self, agent_name: str):
        super().__init__(status_code=404, detail=f"Agent '{agent_name}' not found")

class MemoryNotFoundError(HTTPException):
    def __init__(self, memory_name: str):
        super().__init__(status_code=404, detail=f"Memory '{memory_name}' not found")
```

## üß™ API Testing

### **Test Structure Pattern**
```python
# tests/test_api/test_agent_endpoints.py
import pytest
from fastapi.testclient import TestClient
from src.main import app

client = TestClient(app)

def test_run_agent():
    response = client.post(
        "/api/v1/agent/simple_agent/run",
        json={
            "message_content": "Hello",
            "session_name": "test_session"
        },
        headers={"X-API-Key": "test_key"}
    )
    assert response.status_code == 200
    data = response.json()
    assert "response" in data
    assert "status" in data
```

### **Integration Testing**
```python
@pytest.mark.asyncio
async def test_agent_memory_integration():
    """Test agent execution with memory persistence."""
    # Add memory
    memory_response = client.post(
        "/api/v1/agent/simple_agent/memory",
        json={"name": "user_preference", "content": "Likes details"},
        headers={"X-API-Key": "test_key"}
    )
    assert memory_response.status_code == 200
    
    # Run agent - should use memory
    agent_response = client.post(
        "/api/v1/agent/simple_agent/run",
        json={"message_content": "Explain Python"},
        headers={"X-API-Key": "test_key"}
    )
    assert agent_response.status_code == 200
```

## üîê Security Best Practices

### **Input Validation**
```python
class SecureRequest(BaseModel):
    message_content: str = Field(
        ..., 
        min_length=1, 
        max_length=10000,
        description="Message content (1-10000 characters)"
    )
    session_name: str = Field(
        default="default",
        regex=r"^[a-zA-Z0-9_-]+$",
        max_length=50,
        description="Session name (alphanumeric, underscore, hyphen only)"
    )
    
    @validator('message_content')
    def validate_message_content(cls, v):
        forbidden_patterns = ['<script', '<?php', 'SELECT * FROM']
        if any(pattern in v.lower() for pattern in forbidden_patterns):
            raise ValueError('Invalid message content')
        return v
```

### **Rate Limiting**
```python
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address

limiter = Limiter(key_func=get_remote_address)
app.state.limiter = limiter

@router.post("/agent/{agent_name}/run")
@limiter.limit("10/minute")
async def run_agent(request: Request, agent_name: str, req: AgentRequest):
    # Implementation with rate limiting
    pass
```

## ‚ö° Performance Patterns

### **Async Best Practices**
```python
# ‚úÖ DO: Async all the way down
@router.post("/agent/{agent_name}/run")
async def run_agent(agent_name: str, request: AgentRequest):
    agent = await AgentFactory.get_agent_async(agent_name)
    response = await agent.process_message_async(request.message_content)
    return AgentResponse(response=response)

# ‚ùå DON'T: Blocking operations in async context
async def run_agent_bad(agent_name: str, request: AgentRequest):
    agent = AgentFactory.get_agent(agent_name)  # Blocking!
    response = agent.process_message(request.message_content)  # Blocking!
```

## üéØ Critical DO/DON'T Rules

### **‚úÖ DO**
- **Use `Depends(verify_api_key)`** for all custom endpoints
- **Return Pydantic models** for structured responses
- **Use HTTPException** for error handling
- **Write integration tests** that test agent + memory + API together
- **Validate input** with Pydantic validators
- **Use async/await** throughout the request chain

### **‚ùå DON'T**
- **Skip authentication** on custom endpoints
- **Return raw dictionaries** without Pydantic models
- **Raise generic exceptions** without proper HTTP status codes
- **Test only in isolation** without integration testing
- **Trust user input** without validation
- **Mix blocking and async** operations

## üîÑ Memory Integration

### **Record API Patterns**
```bash
# Before implementing custom endpoints
mcp_memories_search_memory --query "API endpoint patterns authentication"

# After successful implementation
mcp_memories_add_memories --text "Successful custom endpoint pattern: Always use Depends(verify_api_key), return Pydantic models, validate input with Field constraints"
```

---

**Remember**: The API framework is production-ready. Focus on business logic and agent integration rather than rebuilding core infrastructure. All `/api/v1/` endpoints get automatic authentication, documentation, and error handling.
